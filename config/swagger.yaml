swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0"
  title: "COFFIT API"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "coffit@swm.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "127.0.0.1:3000"
basePath: "/"
tags:
- name: "trainer"
  description: "Everything about trainder"
- name: "student"
  description: "Everything about student"
- name: "PT"
  description: "Operations about PT"
- name: "home"
  description: "Page that student visit first. We showing Banner and Trainer list"
- name: "notification"
  description: "Operation about notification."
- name: "schedule"
  description: "Operation about PT schedule"
  
schemes:
- "https"
- "http"

components:
  schemas:
    PTwithSchedule:
      type: "object"
      properties:
        id: #PK
          type: "integer"
          format: "int64"
          description: "PK"
        state:
          type: "string"
          description: "PT state"
          enum: 
          - "exercising"
          - "finished"
        total_number:
          type: "integer"
          format: "int32"
        rest_number:
          type: "integer"
          format: "int32"
        start_date:
          type: "integer"
          format: "date"
          description: "first start PT date"
        end_date:
          type: "integer"
          format: "date"
          description: "Termination time"
        student_id: #FK
          type: "integer"
          format: "int64"
          description: "FK"
        trainer_id: #FK
          type: "integer"
          format: "int64"
          description: "FK"
        schedules:
          type: array
          items:
            $ref: "#/definitions/Schedule"
    BannerAndTrainerList:
      type: object
      properties:
        banner:
          type: array
          items:
            $ref: "#/definitions/Banner"
        trainer_list:
          type: array
          items:
            $ref: "#/definitions/Trainer"
    TrainerDetailWithPicture:
      type: object
      properties:
        
          
paths:
  /home:
    get:
      tags:
      - "home"
      summary: "Get the first page"
      operationId: "getHome"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success!!"
          schema:
            $ref: "#/components/schemas/BannerAndTrainerList"

  /trainer:
    get:
      tags:
      - "trainer"
      parameters:
      - in: "query" # Search Trainer name
        name: "name"
        type: "string"
      summary: "Get a trainer list"
      description: ""
      operationId: "addPet"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success!!"
          schema:
            type: array
            items:
              $ref: "#/definitions/Trainer"
      
  /trainer/{Id}: # trainer picture 추가하기
    get:
      tags:
      - "trainer"
      summary: "Find trainer by ID"
      description: "Returns trainer description"
      operationId: "getPetById"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of trainer"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Trainer"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Trainer not found"
    post:
      tags:
      - "trainer"
      summary: "Updates a trainer information"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
      responses:
        201:
          description: "your request applied"
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /trainer/{Id}/uploadImage:
    post:
      tags:
      - "trainer"
      summary: "uploads an profile image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /trainer/{Id}/setToken:
    post:
      tags:
      - "trainer"
      summary: "upload Token"
      description: ""
      operationId: "setToken"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of trainer"
        required: true
        type: "integer"
        format: "int64"
      - name: "token"
        in: "path"
        description: "token of trainer"
        required: true
        type: "string"
      responses:
        201:
          description: "token saved successfully!!"
        405:
          description: "Invalid input"
    
  /student:
    get:
      tags:
      - "student"
      summary: "get student list by trainer id"
      description: ""
      operationId: "getStudent"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of trainer"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Student"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
  /student/{Id}:
    get:
      tags:
      - "student"
      summary: "find student by student name"
      description: ""
      operationId: "findStudent"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of trainer"
        required: true
        type: "integer"
        format: "int64"
      - name: "username"
        in: "path"
        description: "name of student"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Student"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
    post:
      tags:
      - "student"
      summary: "update this student by student id"
      description: ""
      operationId: "setStudent"
      produces:
      - "application/json"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of student"
        required: true
        type: "integer"
        format: "int64"
      - name: "username"
        in: "path"
        description: "name of student"
        required: true
        type: "string"
      - name: "age"
        in: "path"
        description: "age of student"
        required: true
        type: "integer"
        format: "int64"
      - name: "picture"
        in: "formData"
        description: "picture of student"
        required: false
        type: "string"
      - name: "gender"
        in: "path"
        description: "gender of student"
        required: true
        type: "string"
      - name: "token"
        in: "formData"
        description: "token of student"
        required: false
        type: "string"
      responses:
        201:
          description: "successful operation"
        405:
          description: "Invalid input"
      
  /student/{Id}/setToken:
    post:
      tags:
      - "student"
      summary: "upload Token"
      description: ""
      operationId: "setStudentToken"
      produces:
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID of student"
        required: true
        type: "integer"
        format: "int64"
      - name: "token"
        in: "path"
        description: "token of student"
        required: true
        type: "string"
      responses:
        201:
          description: "token saved successfully!!"
        405:
          description: "Invalid input"
  /PT:
    get:
      tags:
      - "PT"
      summary: "Get all PT list"
      description: "Get all PT, Nessary student id using session or JWT"
      operationId: "getAllPT"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success!!"
          schema:
            $ref: "#/components/schemas/PTwithSchedule"
    post:
      tags:
      - "PT"
      summary : "Make a new connection trainer and student"
      parameters:
      - in: "body"
        name: "body"
        description: "check student ID and trainer ID"
        required: true
        schema:
          $ref: "#/definitions/PT"
      responses:
        200:
          description: "Success!!"
          schema:
            $ref: "#/definitions/PT"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Trainer not found"
    put: # PT시간이 지나 남은 PT 시간 조정 -> 스케쥴에서 시간체크해서 처리하는 로직으로?
      tags:
      - "PT"
      summary : "update PT information after PT"
      parameters:
      - in: "body"
        name: "body"
        description: "hello world"
        required: true
        schema:
          type: "object"
          properties:
            id:
              type: integer
      responses:
        200:
          description: "Success!!"
          schema:
            $ref: "#/definitions/PT"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Trainer not found"
  /PT/student:
    get:
      tags:
      - "PT"
      summary: "get PT list from student"
      description: "Get all PT, Nessary student id using session or JWT"
      operationId: "get PT list from student"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success!!"
          schema:
            $ref: "#/components/schemas/PTwithSchedule"
  /PT/trainer:
    get:
      tags:
      - "PT"
      summary: "get PT list from trainer"
      description: "Get all PT, Nessary student id using session or JWT"
      operationId: "get PT list from trainer"
      produces:
      - "application/json"
      responses:
        200:
          description: "Success!!"
          schema:
            $ref: "#/components/schemas/PTwithSchedule"    
            
  /notifications: #type에 따라서 어떤 메세지 내용이 될지 만드는 로직 필요
    post:
      tags:
      - "notification"
      parameters:
      - name: "body"
        in : "body"
        description: "Obey notification table convention"
        required: true
        schema:
          $ref: "#/definitions/Notification"
      summary: "Create new notification"
      description: ""
      produces:
      - "application/json"
      responses:
        201:
          description: "Success!!"
          schema:
            $ref: "#/definitions/Notification"
        400:
          description: "fail"
  /notifications/students/{id}:
    get:
      tags: 
      - "notification"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of student"
        required: true
        type: "integer"
        format: "int64"
      summary: "get certain student notification"
      description: ""
      produces:
      - "application/json"
      responses:
        200:
          description: "Success!!"
          schema:
            type: array
            items:
              $ref: "#/definitions/Notification"
  /notifications/trainers/{id}:
    get:
      tags: 
      - "notification"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of trainer"
        required: true
        type: "integer"
        format: "int64"
      summary: "get certain trainer notification"
      description: ""
      produces:
      - "application/json"
      responses:
        200:
          description: "Success!!"
          schema:
            type: array
            items:
              $ref: "#/definitions/Notification"

  /schedules:
    get:
      tags:
      - "schedule"
      summary: "get all schedules"
      description: "Show all schedules"
      responses:
        200:
          description: "Success"
          schema:
            $ref: '#/definitions/Schedule'
    post:
      tags:
      - "schedule"
      parameters:
        - name: "body"
          in: "body"
          schema:
            $ref: '#/definitions/Schedule'
      summary: "Student make a new schedule"
      description: ""
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/Schedule'
  # /schedules:
    put: # 수락이든 거절이든 notification 만들기 # 이제 pt 시작하고 안하고를 업데이트
      tags:
      - "schedule"
      parameters:
      - name: "requestTo"
        in: "query"
        type: string
        enum:
        - "trainer"
        - "strudent"
      - name: "body"
        in: "body"
        required: true
        schema:
          $ref: '#/definitions/Schedule'
      summary: "Trainer accept student request schedule."
      description: ""
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/Schedule'
  /schedules/students/{id}:
    get:
      tags:
      - "schedule"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of student"
        required: true
        type: "integer"
        format: "int64"
      summary: "get certain student schedules "
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/Schedule'
  /schedules/trainer/{id}:
    get:
      tags:
      - "schedule"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of trainer"
        required: true
        type: "integer"
        format: "int64"
      summary: "get certain trainer schedules "
      responses:
        200:
          description: ""
          schema:
            $ref: '#/definitions/Schedule'
        
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
    
definitions:
  Trainer:
    type : "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      price:
        type: "integer"
        format: "int64"
      career:
        type: "string"
      description:
        type: "string"
      summary:
        type: "string"
      picture_url:
        type: "string"
      phone_number:
        type: "string"
      fcm_token:
        type: "string"
      total_star:
        type: "integer"
      num_star:
        type: "integer"
      created_at: 
        type: integer
        format: date
      updated_at:
        type: integer
        format: date
        
  TrainerPicture:
    type : "object"
    properties:
      id: #PK
        type: "integer"
        format: "int64"
      picture_url:
        type: "string"
      trainer_id: #FK
        type: "integer"
        format: "int64"
      created_at: 
        type: integer
        format: date
      updated_at:
        type: integer
        format: date
        
  Student:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      uername:
        type: "string"
      email:
        type: "string"
      age:
        type: "integer"
        format: "int64"
      picture:
        type: "string"
      gender:
        type: "string"
      phone_number:
        type: string
        pattern: '^\d{3}-\d{4}-\d{4}$'
      fcm_token:
        type: "string"
      created_at: 
        type: integer
        format: date
      updated_at:
        type: integer
        format: date
        
  PT:
    type: "object"
    properties:
      id: #PK
        type: "integer"
        format: "int64"
        description: "PK"
      state:
        type: "string"
        description: "PT state"
        enum: 
        - "exercising"
        - "finished"
      total_number:
        type: "integer"
        format: "int32"
      rest_number:
        type: "integer"
        format: "int32"
      start_date:
        type: "integer"
        format: "date"
        description: "first start PT date"
      end_date:
        type: "integer"
        format: "date"
        description: "Termination time"
      student_id: #FK
        type: "integer"
        format: "int64"
        description: "FK"
      trainer_id: #FK
        type: "integer"
        format: "int64"
        description: "FK"
      created_at: 
        type: integer
        format: date
      updated_at:
        type: integer
        format: date

  Schedule:
    type : "object"
    properties:
      id: #PK
        type: "integer"
        format: "int64"
      state: 
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date"
      start_time:
        type: "integer"
        format: "time"
      end_time:
        type: "integer"
        format: "time"
      memo:
        type: "string"
      comment:
        type: "string"
      created_at: 
        type: "integer"
        format: "date"
      updated_at:
        type: "integer"
        format: "date"
      student_id:
        type: "integer"
        format: "int64"
      trainer_id:
        type: "integer"
        format: "int64"
      PT_id: #FK
        type: "integer"
        format: "int64"
      
  Banner:
    type: object
    properties:
      id: #PK
        type: integer
        format: int64
      image_url:
        type: string
        format: url
      thumbnail_url:
        type: string
        format: url
      created_at: 
        type: integer
        format: date
      updated_at:
        type: integer
        format: date
  
  Notification:
    type: object
    properties:
      id: #PK
        type: integer
        format: int64
      towhom:
        type: integer
        format: int32
        enum: 
        - 0 #Sending trainer
        - 1 #Sending student
      contents:
        type: string
      type:
        type: integer
      schedule_id:
        type: integer
        format: int64
      student_id:
        type: integer
        format: int64
      trainer_id:
        type: integer
        format: int64
      origin_date:
        type: integer
        format: date
      request_date:
        type: integer
        format: date
      created_at: 
        type: integer
        format: date
      updated_at:
        type: integer
        format: date
      
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
  
  
  
  